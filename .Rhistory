itShouldReturnMinDistance()
itShouldReturnMinDistance <- function(){
d <- data.frame(col.sums=c(2,2,3,5,6),
node=c(1,2,3,4,5))
s <- randomMethod(d,10,2,5)
print(s)
v <- which(s[,1] == min(s[,1]))
print(s[v,])
}
itShouldReturnMinDistance()
randomMethod <- function(dat,n,p,N){
n <- n
p <- p
N <- N
storage <- matrix(0,nrow=n,ncol=(p+1))
for(i in 1:n){
samp <- sample(1:N,p,replace=FALSE)
m <- dat[samp,]
distSum <- sum(dat[samp,1])
storage[i,] <- cbind(distSum,rbind(m$node))
i <- i+1
}
val <- which(storage[,1] == min(storage[,1]))
return(val)
}
itShouldReturnMinDistance <- function(){
d <- data.frame(col.sums=c(2,2,3,5,6),
node=c(1,2,3,4,5))
#   s <- randomMethod(d,10,2,5)
#   print(s)
#   v <- which(s[,1] == min(s[,1]))
#   print(s[v,])
res <- randomMethod()
}
itShouldReturnMinDistance()
randomMethod <- function(dat,n,p,N){
n <- n
p <- p
N <- N
storage <- matrix(0,nrow=n,ncol=(p+1))
for(i in 1:n){
samp <- sample(1:N,p,replace=FALSE)
m <- dat[samp,]
distSum <- sum(dat[samp,1])
storage[i,] <- cbind(distSum,rbind(m$node))
i <- i+1
}
val <- which(storage[,1] == min(storage[,1]))
return(val)
}
itShouldReturnMinDistance <- function(){
d <- data.frame(col.sums=c(2,2,3,5,6),
node=c(1,2,3,4,5))
#   print(s)
#   v <- which(s[,1] == min(s[,1]))
#   print(s[v,])
res <- randomMethod(d,10,2,5)
}
itShouldReturnMinDistance()
randomMethod <- function(dat,n,p,N){
n <- n
p <- p
N <- N
storage <- matrix(0,nrow=n,ncol=(p+1))
for(i in 1:n){
samp <- sample(1:N,p,replace=FALSE)
m <- dat[samp,]
distSum <- sum(dat[samp,1])
storage[i,] <- cbind(distSum,rbind(m$node))
i <- i+1
}
val <- which(storage[,1] == min(storage[,1]))
return(val)
}
itShouldReturnMinDistance <- function(){
d <- data.frame(col.sums=c(2,2,3,5,6),
node=c(1,2,3,4,5))
#   print(s)
#   v <- which(s[,1] == min(s[,1]))
#   print(s[v,])
res <- randomMethod(d,10,2,5)
print(res)
}
itShouldReturnMinDistance()
randomMethod <- function(dat,n,p,N){
n <- n
p <- p
N <- N
storage <- matrix(0,nrow=n,ncol=(p+1))
for(i in 1:n){
samp <- sample(1:N,p,replace=FALSE)
m <- dat[samp,]
distSum <- sum(dat[samp,1])
storage[i,] <- cbind(distSum,rbind(m$node))
i <- i+1
}
val <- which(storage[,1] == min(storage[,1]))
return(storage[val,])
}
itShouldReturnMinDistance <- function(){
d <- data.frame(col.sums=c(2,2,3,5,6),
node=c(1,2,3,4,5))
#   print(s)
#   v <- which(s[,1] == min(s[,1]))
#   print(s[v,])
res <- randomMethod(d,10,2,5)
print(res)
}
itShouldReturnMinDistance()
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
h <- c(2,2,3,5,6,9,9,4,4,6,7,8,2,10,15,16)
itShouldReturnMinDistanceOf10 <- function(){
d <- data.frame(col.sums=c(2,2,3,5,6,9,9,4,4,6,7,8,2,10,15,16),
node=seq(1:16))
res <- randomMethod(d,10,10,16)
print(res)
}
itShouldReturnMinDistanceOf10()
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
rm(list=ls())
source("OneHospital.R")
source("RandomMethod.R")
locPop[1:10,]
nrows(locPop)
nrow(locPop)
two <- randomMethod(locPop,100,2,1579)
two
two <- randomMethod(locPop,1000,2,1579)
two
two <- randomMethod(locPop,10000,2,1579)
two
three <- randomMethod(locPop,10000,3,1579)
three
five <- randomMethod(locPop,10000,5,1579)
five
ten <- randomMethod(locPop,10000,10,1579)
ten
set.seed(1000)
two <- randomMethod(locPop,10000,2,1579)
# Three hospitals
three <- randomMethod(locPop,10000,3,1579)
# Five hospitals
five <- randomMethod(locPop,10000,5,1579)
# Ten hospitals
ten <- randomMethod(locPop,10000,10,1579)
two
three
# Two hospitals
set.seed(1000)
two <- randomMethod(locPop,10000,2,1579)
# Three hospitals
three <- randomMethod(locPop,10000,3,1579)
# Five hospitals
five <- randomMethod(locPop,10000,5,1579)
# Ten hospitals
ten <- randomMethod(locPop,10000,10,1579)
two
three
library(plyr)
comb <- rbind.fill(two, three, five, ten)
comb <- rbind.fill(as.data.frame(two),
as.data.frame(three),
as.data.frame(five),
as.data.frame(ten))
comb
as.data.frame(two)
as.data.frame(t(two))
comb <- rbind.fill(as.data.frame(t(two)),
as.data.frame(t(three)),
as.data.frame(t(five)),
as.data.frame(t(ten))
comb <- rbind.fill(as.data.frame(t(two)),
as.data.frame(t(three)),
as.data.frame(t(five)),
as.data.frame(t(ten)))
comb <- rbind.fill(as.data.frame(t(two)),
as.data.frame(t(three)),
as.data.frame(t(five)),
as.data.frame(t(ten)))
comb
colnames(comb) <- c("Distance","Node1", "Node2", "Node3", "Node4", "Node5",
"Node6", "Node7", "Node8", "Node9", "Node10")
comb
View(locPop)
View(locPop)
View(locPop)
s <- c(1,2,876,321,1)
s <- c(1,2,876,321,1)
s2 <- c(1,3,876,321,1)
sum(s2 != s)
s2 != s
s[c(3,4)]
s[c(3,4)] <- c(1,2)
s
neighbour <- function(s,N,grannar){
index <- sample(1:length(s),grannar,replace=FALSE)
nygranne <- sample(1:N,grannar,replace=FALSE)
s[index] <- nygranne
return(s)
}
itShouldPickARandomNeighbour <- function(){
s <- c(1,2,876,321,1)
granne <- neighbour(s,1579,1)
gold <- 1
d <- sum(granne != s)
stopifnot(d = gold)
}
itShouldPickARandomNeighbour()
itShouldPickARandomNeighbour <- function(){
s <- c(1,2,876,321,1)
granne <- neighbour(s,1579,1)
print(granne)
gold <- 1
d <- sum(granne != s)
stopifnot(d = gold)
}
itShouldPickARandomNeighbour()
itShouldPickARandomNeighbour <- function(){
s <- c(1,2,876,321,1)
granne <- neighbour(s,1579,1)
print(granne)
print(s)
gold <- 1
d <- sum(granne != s)
stopifnot(d = gold)
}
itShouldPickARandomNeighbour()
itShouldPickARandomNeighbour <- function(){
s <- c(1,2,876,321,1)
granne <- neighbour(s,1579,1)
print(granne)
print(s)
gold <- 1
d <- sum(granne != s)
stopifnot(d == gold)
}
itShouldPickARandomNeighbour()
rand()
random()
rnd()
ncol(data)
s
s <- c(1,2,3,4,5)
min(data[,s])
data[,s]
data[1:10,s]
m <- matrix(0,nrow=5,ncol=1)
m
rep(0,5)
m <- rep(1,5)
f <- rep(2,5)
m*f
max(0,5)
P <- function(diffe,rt){
#P is the probability of doing a "jump" when
#en is larger than e
fluff <- (1/(1+max(0,diffe))*rt)
return(fluff)
}
itShouldReturnAValueBetween0and1 <- function(){
value <- P(5,10000)
return(value)
stopifnot(0<=value=<1)
}
itShouldReturnAValueBetween0and1()
P <- function(diffe,rt){
#P is the probability of doing a "jump" when
#en is larger than e
fluff <- (1/(1+max(0,diffe))*rt)
return(fluff)
}
itShouldReturnAValueBetween0and1 <- function(){
value <- P(5,10000)
return(value)
stopifnot(0<=value && value<=1)
}
itShouldReturnAValueBetween0and1()
itShouldReturnAValueBetween0and1 <- function(){
value <- P(5,(9999/10000))
return(value)
stopifnot(0<=value && value<=1)
}
itShouldReturnAValueBetween0and1()
ave(data)
sapply(network,mean)
sapply(data,mean)
mean(data)
colMeans(data)/length(data)
mean(as.matrix(data))
# This function picks a solution at random
randomMethod <- function(dat,n,p,N){
n <- n #sample size
p <- p #number of hospitals to place
N <- N #total number of nodes
#Vector to store minimum distances from population node
#to hospital node
mindist <- rep(0,n)
#matrix to store results
storage <- matrix(0,nrow=n,ncol=(p+1))
samp <- sample(1:N,p,replace=FALSE) #sample
for(i in 1:n){
#Go through every row and find which hosptital
#that row has a minimum distance to
mindist[i] <- min(dat[i,samp])
#Minimum distance * population
mindistpop <- mindist*population
storage[i,] <- cbind(mindistpop,rbind(samp))
i <- i+1
}
val <- which(storage[,1] == min(storage[,1])) #find minimum distance
return(storage[val,])
}
# Test of two nodes
itShouldReturnMinDistance <- function(){
d <- data.frame(col.sums=c(2,2,3,5,6),
node=c(1,2,3,4,5))
res <- randomMethod(d,10,2,5)
#print(res)
}
# Test of 10 nodes
itShouldReturnMinDistanceOf10 <- function(){
d <- data.frame(col.sums=c(2,2,3,5,6,9,9,4,4,6,7,8,2,10,15,16),
node=seq(1:16))
res <- randomMethod(d,10,10,16)
print(res)
}
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
d <- data.frame(col=t(c(1,2,3,4,5,6)),
dist=t(c(10,20,55,66,77,88)))
d
d <- data.frame(col=t(c(1,2,3,4,5,6)),
dist=c(10,20,55,66,77,88))
d
d <- data.frame(col=t((10,20,55,66,77,88))
d <- data.frame(col=t(c(10,20,55,66,77,88))
)
d
d <- data.frame(col=t(c(10,20,55,66,77,88),
col=t(c(20,30,57,67,78,89)))
)
d <- data.frame(col=t(c(10,20,55,66,77,88)),
col=t(c(20,30,57,67,78,89)))
d
d <- data.frame(col=matrix(c(10,20,55,66,
77,88,99,11,
40,30,20,10,
66,77,12,14),4,4))
d
po <- c(10,20,30,10)
po*d
d <- data.frame(col=matrix(c(10,20,55,66,77,88,99,11,40,30,20,10,
66,77,12,14,44,33,22,11,14,15,19,20,
78,89,91,42,33,11,12,34,98,77,55,12,
6,7,2,33,44,99,22,33,45,67,81,28,64),4,12))
d <- data.frame(col=matrix(c(10,20,55,66,77,88,99,11,40,30,20,10,
66,77,12,14,44,33,22,11,14,15,19,20,
78,89,91,42,33,11,12,34,98,77,55,12,
6,7,2,33,44,99,22,33,45,67,81,28,64),
ncol=12,nrow=4))
d <- data.frame(col=matrix(c(10,20,55,66,77,88,99,11,40,30,20,10,
66,77,12,14,44,33,22,11,14,15,19,20,
78,89,91,42,33,11,12,34,98,77,55,12,
6,7,33,44,99,22,33,45,67,81,28,64),
ncol=12,nrow=4))
d
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
sam <- sample(1:4,2,replace=F)
sam
cbind(6,rbind(sam))
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
warnings()
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
warnings()
d <- data.frame(col=matrix(runif(12*4,1,1000),
ncol=12,nrow=4))
d
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
warnings()
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
ncol(d)
ncol(data)
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
d <- data.frame(col=matrix(c(10,20,55,66,
77,88,99,11,
40,30,20,9,
66,77,12,14),4,4))
d
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
d <- data.frame(col=matrix(c(10,20,55,66,
77,88,99,11,
40,30,21,9,
66,77,12,14),4,4))
d
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
warnings()
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/RandomMethod.R')
# This scripts finds random solutions
rm(list=ls())
source("DataPreparation.R")
source("RandomMethod.R")
# Two hospitals
set.seed(1000)
two <- randomMethod(network=data,
population=pop,
n=10000,
p=2)
set.seed(1000)
two <- randomMethod(network=data,
population=pop,
n=100,
p=2)
set.seed(1000)
two <- randomMethod(network=data,
population=pop,
n=10,
p=2)
two
two_sa <- sa(network=data,
population=pop,
grannar=1,
tmax=10,
emax=1000)
source("SimulatedAnnealingAlgorithm.R")
two_sa <- sa(network=data,
population=pop,
grannar=1,
tmax=10,
emax=1000)
source("SimulatedAnnealingAlgorithm.R")
source("SimulatedAnnealingAlgorithm.R")
two_sa <- sa(network=data,
population=pop,
grannar=1,
tmax=10,
emax=1000)
source("SimulatedAnnealingAlgorithm.R")
two_sa <- sa(network=data,
population=pop,
p=2,
grannar=1,
tmax=10,
emax=1000)
source("SimulatedAnnealingAlgorithm.R")
two_sa <- sa(network=data,
population=pop,
p=2,
grannar=1,
tmax=10,
emax=1000)
itShouldPlace2Hospitals() <- function(){
d <- data.frame(col=matrix(runif(12*4,1,100),
ncol=12,nrow=4))
po <- c(10,20,30,10)
two_sa <- sa(network=dat,
population=pop,
p=2,
grannar=1,
tmax=10,
emax=100)
print(two_sa)
}
itShouldPlace2Hospitals()
itShouldPlace2Hospitals <- function(){
d <- data.frame(col=matrix(runif(12*4,1,100),
ncol=12,nrow=4))
po <- c(10,20,30,10)
two_sa <- sa(network=dat,
population=pop,
p=2,
grannar=1,
tmax=10,
emax=100)
print(two_sa)
}
itShouldPlace2Hospitals()
itShouldPlace2Hospitals <- function(){
d <- data.frame(col=matrix(runif(12*4,1,100),
ncol=12,nrow=4))
po <- c(10,20,30,10)
two_sa <- sa(network=d,
population=pop,
p=2,
grannar=1,
tmax=10,
emax=100)
print(two_sa)
}
itShouldPlace2Hospitals()
itShouldPlace2Hospitals()
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/SimulatedAnnealingAlgorithm.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/SimulatedAnnealingAlgorithm.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/SimulatedAnnealingAlgorithm.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/SimulatedAnnealingAlgorithm.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/SimulatedAnnealingAlgorithm.R')
source('//dustaff/home/kss/Documents/Complexity/PascalsProject/SimulatedAnnealingAlgorithm.R')
